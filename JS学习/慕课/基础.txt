1.变量
    什么是变量? 从字面上看，变量是可变的量；从编程角度讲，变量是用于存储某种/某些数值的存储器。我们可以把变量看做一个盒子,盒子用来存放物品,物品可以是衣服、玩具、水果...等。

    我们为了区分盒子，可以用BOX1,BOX2等名称代表不同盒子，BOX1就是盒子的名字（也就是变量的名字）。

    注意:
        1.必须以字母、下划线或美元符号开头，后面可以跟字母、下划线、美元符号和数字。
        2.变量名区分大小写，如:A与a是两个不同变量。
        3.不允许使用JavaScript关键字和保留字做变量名。


2.变量声明
    我们要使用盒子装东西,是不是先要找到盒子,那在编程中，这个过程叫声明变量,找盒子的动作
    声明变量语法:
        var 变量名;
    var就相当于找盒子的动作，在JavaScript中是关键字（即保留字），这个关键字的作用是声明变量，并为"变量"准备位置(即内存）。
        var mynum ; //声明一个变量mynum
    当然，我们可以一次找一个盒子，也可以一次找多个盒子，所以Var还可以一次声明多个变量，变量之间用","逗号隔开。
        var num1,mun2 ; //声明一个变量num1
    注意:变量也可以不声明，直接使用，但为了规范，需要先声明，后使用。


3.变量赋值
    我们可以把变量看做一个盒子,盒子用来存放物品,那如何在变量中存储内容呢?我们使用"="号给变量存储内容,看下面的语句:
        var mynum = 5 ; //声明变量mynum并赋值。
    这个语句怎么读呢？ 给变量mynum赋值，值为5。我们也可以这样写:
        var mynum; //声明变量mynum
        mynum = 5 ; //给变量mynum赋值
    注:这里 "="号的作用是给变量赋值，不是等于号。
    盒子可以装衣服、玩具、水果...等。其实，变量是无所不能的容器，你可以把任何东西存储在变量里，如数值、字符串、布尔值等，例如：
        var num1 = 123;       // 123是数值
        var num2 = "一二三";    //"一二三"是字符串
        var num3=true;    //布尔值true（真），false(假)
    其中，num1变量存储的内容是数值；num2变量存储的内容是字符串，字符串需要用一对引号""括起来，num3变量存储的内容是布尔值(true、false)。


4.表达式
    表达式与数学中的定义相似，表达式是指具有一定的值、用操作符把常数和变量连接起来的代数式。一个表达式可以包含常数或变量。
    javascript语句:
        num = num +1;
    串表达式:
        "I"+"love"+"you"
        "super"+mychar
    数值表达式:
        num+3*4;
        2+2.3
    布尔表达式:
        2>3;
        num==3;

+号操作符
    操作符是用于在JavaScript中指定一定动作的符号。
    （1）操作符
        看下面这段JavaScript代码。
        sum = numa + numb;
        其中的"="和"+"都是操作符。
     JavaScript中还有很多这样的操作符，例如，算术操作符(+、-、*、/等)，比较操作符(<、>、>=、<=等)，逻辑操作符(&&、||、！)。
    注意: “=” 操作符是赋值，不是等于。
    (2) "+"操作符
        算术运算符主要用来完成类似加减乘除的工作，在JavaScript中，“+”不只代表加法，还可以连接两个字符串，例如：
        mystring = "Java" + "Script"; // mystring的值“JavaScript”这个字符串

++和-- (自加一，自减一)
    算术操作符除了(+、-、*、/)外，还有两个非常常用的操作符，自加一“++”；自减一“--”。首先来看一个例子：
        mynum = 10;
        mynum++; //mynum的值变为11
        mynum--; //mynum的值又变回10
    上面的例子中，mynum++使mynum值在原基础上增加1，mynum--使mynum在原基础上减去1,其实也可以写成:
        mynum = mynum + 1;//等同于mynum++
        mynum = mynum - 1;//等同于mynum--


比较操作符
    其中大于号">" 就是比较操作符，小红考试成绩和小明考试成绩就是操作数，并且是两个操作数。
    也就是说两个操作数通过比较操作符进行比较，得到值为真（true）和假(false)。


逻辑"与"操作符
    数学里面的“a>b”，在JavaScript中还表示为a>b；数学中的“b大于a，b小于c”是“a<b<c”，那么在JavaScript中可以用&&表示，如下：
        b>a && b<c    //“&&”是并且的意思, 读法"b大于a"并且" b小于c "
    只有“&&”两边值同时满足(同时为真)，整个表达式值才为真。


逻辑"或"操作符
    "||"逻辑或操作符，相当于生活中的“或者”，当两个条件中有任一个条件满足，“逻辑或”的运算结果就为“真”。
    注意: 如果A为真，A || B为真，不会在执行B; 反之，如果A为假，要由 B 的值来决定 A || B 的值。


逻辑"非"操作符
    "!"是逻辑非操作符，也就是"不是"的意思,非真即假，非假即真。
    c=!(b>a);  // b>a值是true,! (b>a）值是false
    c=!(b<a);  // b<a值是false, ! (b<a）值是true


操作符优先级
    操作符之间的优先级（高到低）:
        算术操作符 > 比较操作符 > 逻辑操作符 > "="赋值符号
    如果同级的运算是按从左到右次序进行,多层括号由里向外。


5.if语句
    语法:
        if(条件){
            条件成立时执行代码
        }
    注意：if小写，大写字母（IF）会出错！

if...else语句
    if...else语句是在指定的条件成立时执行代码，在条件不成立时执行else后的代码。
    语法:
        if(条件){
            条件成立时执行的代码
        }else{
            条件不成立时执行的代码
        }

if..else嵌套语句
    要在多组语句中选择一组来执行，使用if..else嵌套语句。
    语法:
        if(条件1){
            条件1成立时执行的代码
        }else if(条件2){
            条件2成立时执行的代码
        }
        ...
        else  if(条件n){
            条件n成立时执行的代码
        }else{
            条件1、2至n不成立时执行的代码
        }

6.Switch语句
    当有很多种选项的时候，switch比if else使用更方便。
    语法:
        switch(表达式){
            case值1:
              执行代码块 1
              break;
            case值2:
              执行代码块 2
              break;
            ...
            case值n:
              执行代码块 n
              break;
            default:
              与 case值1 、 case值2...case值n 不同时执行的代码
        }
    语法说明:

    Switch必须赋初始值，值与每个case值匹配。满足执行该 case 后的所有语句，并用break语句来阻止运行下一个case。如所有case值都不匹配，执行default后的语句。

7.for循环
    for语句结构：
        for(初始化变量;循环条件;循环迭代){
            循环语句
        }

8.while循环
    和for循环有相同功能的还有while循环, while循环重复执行一段代码，直到某个条件不再满足。
    while语句结构：
        while(判断条件){
            循环语句
         }

9.Do...while循环
    do while结构的基本原理和while结构是基本相同的，但是它保证循环体至少被执行一次。因为它是先执行代码，后判断条件，如果条件为真，继续循环。
    do...while语句结构：
        do{
            循环语句
         }
        while(判断条件)

10.退出循环break
    在while、for、do...while、while循环中使用break语句退出当前循环，直接执行后面的代码。
    格式如下：
        for(初始条件;判断条件;循环后条件值更新){
            if(特殊情况){
            break;
            }
            循环代码
        }

11.继续循环continue
    continue的作用是仅仅跳过本次循环，而整个循环体继续执行。
    语句结构：
    for(初始条件;判断条件;循环后条件值更新){
        if(特殊情况){
            continue;
        }
        循环代码
    }













